import discord
from discord.ext import commands
import random
import os
import asyncio

# La variable intents almacena los privilegios del bot
intents = discord.Intents.default()
# Activar el privilegio de lectura de mensajes
intents.message_content = True
# Crear un bot en la variable cliente y transferirle los privilegios
bot = commands.Bot(command_prefix = "$",intents=intents)

@bot.event
async def on_ready():
    print(f'Hemos iniciado sesiÃ³n como {bot.user}')

@bot.command()
async def hello(ctx):
    await ctx.send("HI!")

@bot.command()
async def bye(ctx):
    await ctx.send("ðŸ˜ž")



@bot.command()
async def repeat(ctx, times: int, content='repeating...'):
    """Repeats a message multiple times."""
    for i in range(times):
        await ctx.send(content)


@bot.command()
async def mem_aleatorio(ctx):
    mem_alet = random.choice(os.listdir("images"))
    with open(f'images/{mem_alet}', 'rb') as f:
        # Â¡Vamos a almacenar el archivo de la biblioteca Discord convertido en esta variable!
        picture = discord.File(f)
    # A continuaciÃ³n, podemos enviar este archivo como parÃ¡metro.
    await ctx.send(file=picture)



@bot.command()
async def roll(ctx, dice: str):
    """Rolls a dice in NdN format."""
    try:
        rolls, limit = map(int, dice.split('d'))
    except Exception:
        await ctx.send('Format has to be in NdN!')
        return

    result = ', '.join(str(random.randint(1, limit)) for r in range(rolls))
    await ctx.send(result)
    
@bot.command()
async def upload_image(ctx):
    if len(ctx.message.attachments) == 0:
        await ctx.send("No se ha encontrado ninguna imagen adjunta.")
    else:
        # Iterar sobre los archivos adjuntos
        for attachment in ctx.message.attachments:
            if attachment.filename.endswith(('jpg', 'jpeg', 'png')):
                # Guardar la imagen en el sistema de archivos local
                filepath = f"images/{attachment.filename}"
                await attachment.save(filepath)
                
                # Enviar la URL de la imagen de vuelta al usuario
                await ctx.send(clasificar_imagenes[f"image/{attachment.filename}"])
                await ctx.send(f"Imagen {attachment.filename} guardada con Ã©xito. Disponible en: {attachment.url}")
            else:
                await ctx.send(f"El archivo {attachment.filename} no es una imagen vÃ¡lida.")
#Funcion para activar el bot 
#import asyncio               
def start_bot():
    asyncio.get_event_loop().run_until_complete(bot.start("creeias que iba dejar mi token? jajaja"))

import nest_asyncio
nest_asyncio.apply()

start_bot()


